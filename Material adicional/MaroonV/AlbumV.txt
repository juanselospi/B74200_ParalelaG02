üß† RESUMEN ‚Äì Programaci√≥n Paralela y Concurrente

----------------------------------------------------
1. Conceptos base
----------------------------------------------------
Fork: crea un proceso hijo id√©ntico al padre. Ambos contin√∫an desde la llamada.
IPC: mecanismos para que procesos independientes se comuniquen (Sem√°foros, Buzones, Memoria Compartida).

----------------------------------------------------
2. Mecanismos de sincronizaci√≥n
----------------------------------------------------
Sem√°foro: contador entero que controla acceso a recursos. wait()/signal().
Mutex: exclusi√≥n mutua, solo 1 hilo a la vez. lock()/unlock().
Lock: abstracci√≥n de mutex. RAII en C++.
Condition Variable: permite suspender hilos hasta cumplir condici√≥n. Usar con mutex.
Barrier: todos los hilos deben llegar antes de continuar.
Monitor: estructura con m√©todos sincronizados y condiciones. Garantiza exclusi√≥n y espera-condici√≥n.

----------------------------------------------------
3. PThreads (POSIX Threads)
----------------------------------------------------
pthread_create(&h, NULL, func, arg);
pthread_join(h, NULL);
pthread_mutex_init(), lock(), unlock();
pthread_cond_wait(), pthread_cond_signal();

Todos los hilos comparten memoria global. Proteger con mutexes.

----------------------------------------------------
4. IPC cl√°sico (Linux)
----------------------------------------------------
Sem√°foros SysV: <sys/sem.h> ‚Üí semget, semop, semctl
Buzones: <sys/msg.h> ‚Üí msgget, msgsnd, msgrcv, msgctl
Memoria compartida: <sys/shm.h> ‚Üí shmget, shmat, shmdt, shmctl

Limpiar recursos:
ipcs
ipcrm -q <id>   (colas)
ipcrm -m <id>   (memoria)
ipcrm -s <id>   (sem√°foros)

----------------------------------------------------
5. Comparaci√≥n de rendimiento
----------------------------------------------------
SpeedUp (S) = Ts / Tp
Eficiencia (E) = S / P
Tp = max(tiempo por trabajador)

Ejemplo:
Ts = 100, Tp = 30, P = 4
S = 3.33, E = 0.83 (83%)

----------------------------------------------------
6. Mapeo de tareas
----------------------------------------------------
Est√°tico por bloque: tareas contiguas, ideal si homog√©neas.
Est√°tico c√≠clico: reparte 1 tarea por hilo, ideal si var√≠an un poco.
Din√°mico: asigna conforme terminan, ideal si var√≠an mucho. Overhead mayor.

----------------------------------------------------
7. Resumen visual
----------------------------------------------------
Fork      ‚Üí procesos separados
Threads   ‚Üí hilos en mismo proceso
Mutex     ‚Üí 1 a la vez
Sem√°foro  ‚Üí control general (N recursos)
CondVar   ‚Üí esperar condici√≥n
Monitor   ‚Üí mutex + condvar integrados
Barrier   ‚Üí esperar todos
